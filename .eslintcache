[{"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\index.tsx":"1","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\reportWebVitals.ts":"2","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\App.tsx":"3","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\site\\Navbar.tsx":"4","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\auth\\Register.tsx":"5","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\auth\\Login.tsx":"6","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Site\\Navbar.tsx":"7","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Auth\\Register.tsx":"8","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Auth\\Login.tsx":"9","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemsList.tsx":"10","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\Item.tsx":"11","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemCreate.tsx":"12","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemsSearch.tsx":"13","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\UserList.tsx":"14","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\User.tsx":"15","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\Admin.tsx":"16","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\ItemDetailView.tsx":"17","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\FilterItems.tsx":"18","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Reviews\\Reviews.tsx":"19","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Site\\Cart.tsx":"20","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Site\\Footer.tsx":"21"},{"size":500,"mtime":1610994517413,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":7586,"mtime":1611534551410,"results":"25","hashOfConfig":"23"},{"size":1616,"mtime":1608064390132,"results":"26","hashOfConfig":"23"},{"size":5851,"mtime":1608062193212,"results":"27","hashOfConfig":"23"},{"size":4200,"mtime":1608062918479,"results":"28","hashOfConfig":"23"},{"size":5888,"mtime":1611535949387,"results":"29","hashOfConfig":"23"},{"size":6772,"mtime":1611101335128,"results":"30","hashOfConfig":"23"},{"size":5550,"mtime":1611101458175,"results":"31","hashOfConfig":"23"},{"size":1382,"mtime":1611535523220,"results":"32","hashOfConfig":"23"},{"size":11211,"mtime":1611541508703,"results":"33","hashOfConfig":"23"},{"size":5841,"mtime":1611101667517,"results":"34","hashOfConfig":"23"},{"size":995,"mtime":1610670881036,"results":"35","hashOfConfig":"23"},{"size":1961,"mtime":1611101344286,"results":"36","hashOfConfig":"23"},{"size":12143,"mtime":1611101748991,"results":"37","hashOfConfig":"23"},{"size":3198,"mtime":1611101369478,"results":"38","hashOfConfig":"23"},{"size":10156,"mtime":1611531191089,"results":"39","hashOfConfig":"23"},{"size":1158,"mtime":1610997147916,"results":"40","hashOfConfig":"23"},{"size":8170,"mtime":1611101519496,"results":"41","hashOfConfig":"23"},{"size":5793,"mtime":1611540653719,"results":"42","hashOfConfig":"23"},{"size":1721,"mtime":1611538306677,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1q2qrcs",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\index.tsx",[],["93","94"],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\reportWebVitals.ts",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\App.tsx",["95","96"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Admin from './components/Users/Admin';\nimport FilterItems from './components/StoreItems/FilterItems';\nimport Footer from './components/Site/Footer';\nimport ItemDetailView from './components/StoreItems/ItemDetailView';\nimport Login from './components/Auth/Login';\nimport Navbar from './components/Site/Navbar';\nimport Register from './components/Auth/Register';\nimport StoreItemsCreate from './components/StoreItems/StoreItemCreate';\nimport StoreItemsList from './components/StoreItems/StoreItemsList';\nimport UserList from './components/Users/UserList';\nimport Cart from './components/Site/Cart';\n \ntype AppState = {\n  token: string;\n  newToken: string;\n  userId: number;\n  setStoreItems: any;\n  storeItems: any[];\n  itemId: number;\n  users: any[];\n  filteredItems: any[];\n  sort: any;\n  isAdmin: boolean;\n  firstName: string;\n  searchTerm: string;\n  searchItems: any[];\n  rating: number;\n  redirect: boolean;\n  errorStatus: boolean;\n  cart: any[];\n  itemObj: any;\n}\n\nclass App extends React.Component <{}, AppState> {\n  constructor (props: {}) {\n    super(props);\n    this.state = {\n      token: '',\n      newToken: '',\n      userId: -1,\n      setStoreItems: '',\n      storeItems: [],\n      itemId: 0,\n      users: [],\n      filteredItems: [],\n      sort: '',\n      isAdmin: false,\n      firstName: '',\n      searchTerm: '',\n      searchItems: [],\n      rating: 0,\n      redirect: false,\n      errorStatus: false,\n      cart: [],\n      itemObj: ''\n    }\n  }\n\n  fetchStoreItems = () => {\n    fetch('http://localhost:8080/listing/', {\n      method: 'GET'\n    })\n      .then(r => r.json())\n      .then(obj => this.setState({ \n        storeItems: obj.listing, \n        filteredItems: obj.listing })) // filters items based on price\n      .catch(err => {console.log(err); {this.setState({errorStatus: true})}})\n  }\n\n  fetchUsers = () => {\n    fetch('http://localhost:8080/user/all/', {\n      method: 'GET'\n    })\n      .then(r => r.json())\n      .then(obj => this.setState({ users: obj.user }))\n      .catch(err => {console.log(err); {this.setState({errorStatus: true})}})\n  }\n\n  setToken = (token: string) => {\n    if (token) {\n      this.setState({token: token})\n      localStorage.setItem('token', token)\n    } else {\n      this.setState({token: localStorage.getItem('token') || ''}) \n    }\n  }\n\n  // updates the state for the token, userId,admin status, and first name when a user logs in or registers\n  updateToken = (newToken: any, updateId: any, updateAdmin: boolean, updateFirstName: string) => {\n    localStorage.setItem('token', newToken);\n    localStorage.setItem('id', updateId)\n    this.setState({token: newToken});\n    this.setState({userId: updateId});\n    this.setState({isAdmin: updateAdmin})\n    this.setState({firstName: updateFirstName})\n    console.log('Token: ', newToken)\n    console.log(\"User id: \", updateId)\n    console.log(\"Admin? :\", updateAdmin)\n    console.log(\"User first name:\", updateFirstName)\n  }\n\n  updateSearch = (storeItem: any[]) => {\n    this.setState({ storeItems: storeItem })\n    console.log(\"search\", storeItem)\n  }\n\n  updateItemId = (itemId: any) => {\n    this.setState({ itemId: itemId })\n    console.log('itemid', itemId)\n  }\n\n  updateItem = (item: any) => {\n    this.setState({ itemObj: item })\n    console.log('itemid', item)\n  }\n\n  // when user logs out, it redirects to '/' and resets the first name\n  clearToken = () => {\n    localStorage.clear();\n    this.setState({ redirect: true })\n    this.setState({ firstName: ''})\n  }\n\n  listItems = () => {\n    this.setState(state => {\n      // if state of sort is not empty, sort based on lowest or highest price\n      if (state.sort !== '') {\n        this.state.storeItems.sort((a,b) => (state.sort === 'lowest') ? (a.price > b.price ? 1 : -1) : (a.price < b.price ? 1 : -1))\n      } else {\n        state.storeItems.sort((a,b) => (a.id > b.id ? 1: -1)); // set default sort by id\n      }\n      \n      return {filteredItems: this.state.storeItems};\n    })\n  }\n\n  handleChangeSort = (e: any) => {\n    this.setState({sort: e.target.value})\n    this.listItems();\n  }\n\n  removeFromCart = (product: any) => {\n    try {\n      this.setState({cart: this.state.cart.slice()});\n      this.setState({ cart: this.state.cart.filter(item => item.id !== product)})\n      // this.setState({ redirect: true })\n      console.log('Item removed from cart.')\n      console.log('cart: ', this.state.cart)\n    } catch {\n      console.log('Item not removed from cart.')\n    }\n  }\n\n  addToCart = (product: any) => {\n    try {\n      this.setState({cart: this.state.cart.slice()});\n      let alreadyInCart = false;\n      this.state.cart.forEach((item: any) => {\n        if (item.id === product.id) {\n          item.count++;\n          alreadyInCart = true;\n        }\n      });\n      if (!alreadyInCart) {\n        this.state.cart.push({...product, count: 1});\n      }\n      this.setState({ cart: this.state.cart})\n        console.log('add to cart: ', product)\n        console.log('cart: ', this.state.cart)\n    } catch {\n      console.log('did not add to cart')\n    }\n  }\n\n  componentDidMount() {\n    this.setToken('')\n    this.fetchStoreItems()\n    this.fetchUsers()\n  }\n\n  render() {  \n    \n    return (\n      <div> \n        {/* {console.log(\"App token \" + this.state.rating)} */}\n        <Router>\n          <Navbar clickLogout={this.clearToken} sessionToken={this.state.token} adminStatus={this.state.isAdmin} userFirstName={this.state.firstName} searchItems={this.state.searchItems} updateSearch={this.updateSearch} fetchStoreItems={this.fetchStoreItems} />\n          {/* redirect to '/' when user logs out */}\n          {this.state.redirect ? (<Redirect to='/'/> && window.location.reload()) : null}\n          {/* if there is an issue fetching data, redirect to home page */}\n          {this.state.errorStatus ? (<Redirect to=\"/\" />) : null}\n          <Switch>\n            <Route path='/' exact ><StoreItemsList sessionToken={this.state.token} adminStatus={this.state.isAdmin} storeItems={this.state.storeItems} fetchStoreItems={this.fetchStoreItems} sort={this.state.sort} handleChangeSort={this.handleChangeSort} updateItemId={this.updateItemId} updateItem={this.updateItem} addToCart={this.addToCart} storeItemObj={this.state.itemObj}/></Route>\n            <Route path='/user/register'><Register updateToken={this.updateToken} token={this.state.token}/></Route>\n            <Route path='/user/login' exact ><Login updateToken={this.updateToken} token={this.state.token} adminStatus={this.state.isAdmin}/></Route>\n            <Route path='/user/admin'><Admin sessionToken={this.state.token}/></Route>\n            <Route path='/user/all' ><UserList users={this.state.users} fetchUsers={this.fetchUsers} sessionToken={this.state.token} token={this.state.token}/></Route>\n            <Route path='/listing/create'><StoreItemsCreate sessionToken={this.state.token} fetchStoreItems={this.fetchStoreItems}/></Route>\n            <Route path='/listing/:id'><ItemDetailView storeItemId={this.state.itemId} sessionToken={this.state.token} userId={this.state.userId} adminStatus={this.state.isAdmin} addToCart={this.addToCart} storeItemObj={this.state.itemObj}/></Route>\n            <Route path='sort'><FilterItems sort={this.state.sort} handleChangeSort={this.handleChangeSort} /></Route>\n            <Route path='/cart'><Cart cartItems={this.state.cart} removeFromCart={this.removeFromCart}/></Route>\n          </Switch>\n          <Footer />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\site\\Navbar.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\auth\\Register.tsx",[],["97","98"],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\auth\\Login.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Site\\Navbar.tsx",["99"],"import React from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Container from '@material-ui/core/Container'\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\r\nimport SupervisorAccountOutlinedIcon from '@material-ui/icons/SupervisorAccountOutlined';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\ntype NavbarProps = {\r\n  clickLogout: any;\r\n  sessionToken: string;\r\n  adminStatus: boolean;\r\n  userFirstName: string;\r\n  fetchStoreItems: any;\r\n  searchItems: any[];\r\n  updateSearch: any;\r\n  // avgRating: any\r\n}\r\n\r\ntype NavbarState = {\r\n  searchTerm: string;\r\n}\r\n\r\nclass Navbar extends React.Component<NavbarProps, NavbarState> {\r\n  constructor (props: NavbarProps) {\r\n    super(props);\r\n    this.state = {\r\n      searchTerm: ''\r\n    }\r\n  }\r\n\r\n  // automatically creates admin account when the '/user/admin' endpoint is reached\r\n  createAdmin = () => {\r\n    const url = 'http://localhost:8080/user/admin';\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(r => r.json())\r\n      .then(rObj => {\r\n        console.log(rObj)\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  handleSearch = () => {\r\n    fetch(`http://localhost:8080/listing/name/${this.state.searchTerm}`, {\r\n      method: 'GET'\r\n    })\r\n    .then(r => r.json())\r\n    .then(obj => { this.props.updateSearch(obj.item )\r\n      console.log(obj.item)\r\n    })\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  setSearch = (e: any) => {\r\n    if (e.target.value) {\r\n      this.setState({ searchTerm: e.target.value });\r\n    } else {\r\n      this.props.fetchStoreItems()\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        {/* <AppBar style={{ background:'#333333', color:\"white\", height:'30px', display: \"flex\", textAlign:'center', justifyContent:'center'}} elevation={0}>\r\n          <Typography style={{ fontFamily:'Montserrat', fontSize:'0.9em' }}>\r\n            Free Shipping Over $100\r\n          </Typography>\r\n        </AppBar> */}\r\n        <AppBar style={{ background: 'white', color: \"rgba(0, 0, 0, 0.87)\", borderBottom: \"1.2px solid #cccccc\", display: \"flex\", padding:'0.5em 0 0.5em 0'}} elevation={0} >\r\n        <Container maxWidth=\"lg\">\r\n          <Toolbar disableGutters={true}>\r\n            <Typography variant=\"h6\" className=\"storeName\">\r\n              <Link to=\"/\" style={{textDecoration: 'none', color: 'rgba(0, 0, 0, 0.87)', marginRight: '16px', fontFamily:'Open Sans', fontSize:'24px'}} onClick={this.props.fetchStoreItems}>\r\n                <Typography style={{ fontFamily:'Playfair Display', display:'inline-block', fontSize:'1.5em'}}>Mollie</Typography>\r\n                <Typography style={{ fontFamily:'Montserrat', display:'inline-block', fontSize:'1.6em'}}>Birch</Typography>\r\n              </Link>\r\n            </Typography>\r\n            <div className=\"search\" style={{position: 'relative', marginLeft: 'auto', marginRight: '1.5em', \r\n              padding: '0 0 0 0.6em', borderRadius: '4px', border: '1px solid grey', fontFamily:'Montserrat', backgroundColor:'white'}}>\r\n              <InputBase\r\n                placeholder=\"Search\"\r\n                id=\"searchTerm\"\r\n                style={{ fontFamily:'Montserrat', backgroundColor:'white' }}\r\n                inputProps={{ 'aria-label': 'search' }}\r\n                onChange={this.setSearch.bind(this)}\r\n              />\r\n              <IconButton edge=\"start\" size=\"small\" className=\"accountIconButton\" color=\"inherit\" aria-label=\"menu\" onClick={this.handleSearch}>\r\n                <SearchIcon />\r\n              </IconButton>\r\n            </div>\r\n          {/* if the user is logged in, display a welcome message with the user's name */}\r\n            {this.props.userFirstName ?\r\n              <Typography className=\"welcomeText\" style={{ fontFamily:'Montserrat', fontWeight:'bold' }}>\r\n                Welcome, {this.props.userFirstName}!\r\n              </Typography> :\r\n              null\r\n            } \r\n          {/* if the user is an admin, show the admin portal button */}\r\n            {this.props.adminStatus ? \r\n              <IconButton edge=\"start\" className=\"adminButton\" color=\"inherit\" aria-label=\"menu\" >\r\n                <Link to='/user/admin' style={{color: 'rgba(0, 0, 0, 0.87)', padding: '0.3em 0 0 0.4em'}} >\r\n                  <SupervisorAccountOutlinedIcon />\r\n                </Link>\r\n              </IconButton> :\r\n              null\r\n            }\r\n          {/* display the login, shopping cart, and logout buttons for all users*/}\r\n            <IconButton edge=\"start\" className=\"accountIconButton\" color=\"inherit\" aria-label=\"menu\">\r\n              <Link to='/user/login' style={{color: 'rgba(0, 0, 0, 0.87)', padding: '0.3em 0 0 0.4em'}} >\r\n                <AccountCircleOutlinedIcon />\r\n              </Link>\r\n            </IconButton>\r\n            <IconButton edge=\"start\" className=\"cartIconButton\" color=\"inherit\" aria-label=\"menu\">\r\n              <Link to='/cart' style={{color: 'rgba(0, 0, 0, 0.87)', padding: '0.3em 0 0 0.4em'}} >\r\n                <ShoppingCartOutlinedIcon />\r\n              </Link>\r\n            </IconButton>\r\n            <IconButton onClick={this.props.clickLogout} edge=\"start\" className=\"lockIconButton\" color=\"inherit\" aria-label=\"menu\">\r\n                <LockOutlinedIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n          </Container>\r\n        </AppBar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Auth\\Register.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Auth\\Login.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemsList.tsx",["100","101"],"import React from 'react';\r\nimport Item from './Item';\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FilterItems from './FilterItems';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\ntype ListProps = {\r\n  sessionToken: string;\r\n  fetchStoreItems: any;\r\n  storeItems: any;\r\n  adminStatus: boolean;\r\n  updateItemId: any;\r\n  sort: any;\r\n  handleChangeSort: any;\r\n  updateItem: any;\r\n  addToCart: any;\r\n  storeItemObj: any;\r\n}\r\n\r\nexport default class StoreItemsList extends React.Component<ListProps> {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container maxWidth=\"lg\" style={{ marginTop:\"7em\", marginBottom:'4em' }}>\r\n          <FilterItems sort={this.props.sort} handleChangeSort={this.props.handleChangeSort}/>\r\n          <Grid container spacing={2} alignItems=\"center\">\r\n              {this.props.storeItems.map((itemObj: any, i: any) => <Grid item xs={12} sm={6} md={4}><Item item={itemObj} key={i}adminStatus={this.props.adminStatus} sessionToken={this.props.sessionToken} fetchStoreItems={this.props.fetchStoreItems} updateItemId={this.props.updateItemId} updateItem={this.props.updateItem} addToCart={this.props.addToCart} storeItemObj={this.props.storeItemObj}/></Grid> )}\r\n          </Grid>      \r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\Item.tsx",["102","103"],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemCreate.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemsSearch.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\UserList.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\User.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\Admin.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\ItemDetailView.tsx",["104","105","106"],"import React from 'react';\r\nimport { withStyles, createStyles } from '@material-ui/core/styles';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport Button from '@material-ui/core/Button'\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Reviews from './../Reviews/Reviews';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Cart from '../Site/Cart';\r\n\r\ntype ItemProps = {\r\n  sessionToken: any;\r\n  storeItemId: number;\r\n  classes: any;\r\n  userId: number;\r\n  adminStatus: boolean;\r\n  addToCart: any;\r\n  storeItemObj: any;\r\n}\r\n\r\ntype ItemState = {\r\n  itemName: string;\r\n  color: string;\r\n  description: string;\r\n  price: number;\r\n  itemNum: number;\r\n  imgURL: string;\r\n  reviews: any[];\r\n  imgPath: string;\r\n  totalRating: number;\r\n  count: number;\r\n  avgRating: number;\r\n  errorStatus: boolean;\r\n  active: boolean;\r\n  rating: number;\r\n  review: string;\r\n  date: string;\r\n  // cart: any[];\r\n}\r\n\r\nconst styles = (theme: any) => createStyles({\r\n  root: {\r\n    display: 'flex',\r\n    // display: 'inline-block'\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  content: {\r\n    flex: '1 0 auto',\r\n  },\r\n  cover: {\r\n    // width: 151,\r\n  },\r\n})\r\n\r\nclass ItemDetailView extends React.Component<ItemProps, ItemState> {\r\n  constructor (props: ItemProps) {\r\n    super(props);\r\n    this.state = {\r\n      itemName: '',\r\n      color: '',\r\n      description: '',\r\n      price: 0,\r\n      itemNum: 0,\r\n      imgURL: '',\r\n      reviews: [],\r\n      imgPath: '',\r\n      totalRating: 0,\r\n      count: 0,\r\n      avgRating: 0,\r\n      errorStatus: false,\r\n      active: false,\r\n      rating: 0,\r\n      review: '',\r\n      date: '',\r\n      // cart: []\r\n    } \r\n    // this.handleAddToCart = this.handleAddToCart.bind(this);\r\n  }\r\n\r\n  setRating = (e: any) => {\r\n    this.setState({rating: e.target.value});\r\n  }\r\n\r\n  setReview = (e: any) => {\r\n    this.setState({review: e.target.value});\r\n  }\r\n\r\n  setDate = (e: any) => {\r\n    this.setState({date: e.target.value});\r\n  }\r\n\r\n  getItemDetails = () => {\r\n    fetch(`http://localhost:8080/listing/${this.props.storeItemId}`, {\r\n      method: 'GET'\r\n    }).then(r => r.json())\r\n      .then(obj => {\r\n        this.setState({ \r\n          itemName: obj.listing.itemName,\r\n          color: obj.listing.color,\r\n          description: obj.listing.description,\r\n          price: obj.listing.price,\r\n          itemNum: obj.listing.itemNum,\r\n          imgURL: obj.listing.imgURL\r\n        })\r\n      })\r\n      .catch(err => {this.setState({errorStatus: true})})\r\n  }\r\n\r\n  getItemReviews = () => {\r\n    fetch(`http://localhost:8080/review/item/${this.props.storeItemId}`, {\r\n      method: 'GET'\r\n    }).then(r => r.json())\r\n      .then(obj => {\r\n        this.setState({ \r\n          reviews: obj\r\n        })\r\n        // console.log(obj)\r\n    })\r\n    .catch(err => {this.setState({errorStatus: true})})\r\n  }\r\n  \r\n\r\n  handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    const url = 'http://localhost:8080/review/create';\r\n    const body = {\r\n      rating: this.state.rating,\r\n      review: this.state.review,\r\n      date: this.state.date,\r\n      userId: this.props.userId,\r\n      storeitemId: this.props.storeItemId\r\n    }\r\n  \r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.props.sessionToken\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n      .then(r => r.json())\r\n      .then(rObj => {\r\n        console.log(rObj)\r\n        this.getItemReviews()\r\n        this.setState({ active: false }) // turn toggle off after creating review\r\n      })\r\n      .catch(err => console.log(err, this.props.userId, this.props.storeItemId))\r\n  }\r\n\r\n  toggle = () => {\r\n    const showEdit = this.state.active\r\n    this.setState({active: !showEdit})\r\n  }\r\n\r\n  calculateTotalRating = (rating: any) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        totalRating: (prevState.totalRating + rating),\r\n        count: (prevState.count + 1),\r\n        avgRating: (prevState.totalRating + rating) / (prevState.count + 1)\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.getItemDetails();\r\n    this.getItemReviews();\r\n  }\r\n  \r\n  render() {\r\n    const { classes } = this.props;\r\n    // if there is an issue fetching data, redirect to home page\r\n    if (this.state.errorStatus) {\r\n      return (<Redirect to=\"/\" />)\r\n    } \r\n    // {console.log('totalrating', this.state.totalRating, 'count', this.state.count, 'avgRating', this.state.avgRating)}\r\n    return (\r\n      <div>\r\n        <Container component=\"main\" maxWidth=\"lg\">\r\n          <Link to=\"/\" style={{textDecoration:'none', color:'black'}}>\r\n            <ArrowBackIosIcon style={{marginTop:'130px', marginRight:'-7px' }}/> \r\n            <Typography style={{ display:'inline', fontFamily:'Open Sans', fontSize:16, verticalAlign:'7px' }}>Back</Typography>\r\n          </Link>\r\n        \r\n          <Card className={classes.root} style={{ marginTop:'2em', borderRadius:'0px', border:'none'}} variant=\"outlined\">\r\n            {this.state.imgURL ? \r\n              <CardMedia\r\n                className={classes.cover}\r\n                image={require(`../../assets/${this.state.imgURL}.jpg`).default}\r\n                title=\"Listing img\"\r\n                style={{height: 200, width: '60%', paddingTop: '35%'}}\r\n              />\r\n            : null}\r\n            <div className={classes.details} style={{width:'40%', paddingLeft:'1em'}}>\r\n              <CardContent className={classes.content} >\r\n                <Typography component=\"h5\" variant=\"h5\" style={{ fontFamily:'Montserrat', fontWeight:'bold',  textTransform:'capitalize' }}>\r\n                  {this.state.itemName}\r\n                </Typography>\r\n                <Rating name=\"size-medium\" value={this.state.avgRating} precision={0.5} readOnly /> \r\n                <Typography variant=\"subtitle1\" color=\"textSecondary\" style={{ fontFamily:'Open Sans', textTransform:'capitalize' }}>\r\n                  ${this.state.price.toLocaleString()}\r\n                  <br/>\r\n                  {this.state.color}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" style={{ fontFamily:'Open Sans' }}>\r\n                  <br/>\r\n                  {this.state.description}\r\n                  <br/>\r\n                  <br/>\r\n                  Item: {this.state.itemNum}\r\n                </Typography>\r\n                <Button variant=\"contained\" color=\"secondary\" style={{width:'98%', marginTop:'3em', fontFamily:'Open Sans'}} onClick={() => this.props.addToCart(this.props.storeItemObj)}>\r\n                  Add to Cart\r\n                </Button>\r\n              </CardContent>\r\n            </div>\r\n          </Card>\r\n        </Container>\r\n        <Container maxWidth=\"sm\" style={{ marginTop:\"6em\", marginBottom:'4em' }}>\r\n          <Grid container spacing={2} alignItems=\"center\" style={{justifyContent: 'center'}}>\r\n            {!this.props.sessionToken ? \r\n              <Button variant=\"outlined\" disabled style={{width:'98%', marginBottom:'1em', fontFamily:'Open Sans' }}>\r\n                Sign-in to Leave Review\r\n              </Button> :\r\n              <Button variant=\"outlined\" style={{width:'98%', marginBottom:'1em'}} onClick={this.toggle}>\r\n                Write A Review\r\n                </Button>}\r\n            {this.state.active ?\r\n            <div className=\"paper\" style={{marginTop:'0em'}}>\r\n              <form onSubmit={this.handleSubmit} className=\"formEditListing\" style={{ width: '70%', fontFamily:'Open Sans' }} noValidate>\r\n                <Rating\r\n                  name=\"customized-empty\"\r\n                  defaultValue={0}\r\n                  // value={this.state.rating}\r\n                  emptyIcon={<StarBorderIcon fontSize=\"inherit\" />}\r\n                  onClick={this.setRating.bind(this)}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"review\"\r\n                  label=\"Review\"\r\n                  id=\"review\"\r\n                  style={{ fontFamily:'Open Sans' }}\r\n                  onChange = {this.setReview.bind(this)}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  id=\"date\"\r\n                  style={{ fontFamily:'Open Sans' }}\r\n                  onChange = {this.setDate.bind(this)}\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{marginTop:\"1em\", marginBottom:'5em', fontFamily:'Open Sans' }}\r\n                  className=\"submitCreate\" >\r\n                  Create Review\r\n                </Button>\r\n              </form> \r\n            </div>:\r\n            null\r\n            }\r\n            \r\n            {this.state.reviews.map((revObj: any, i: any) => <Grid item xs={12}>\r\n              <Reviews revObj={revObj} key={i} calculateTotalRating={this.calculateTotalRating} userId={this.props.userId} adminStatus={this.props.adminStatus} sessionToken={this.props.sessionToken} fetchReviews={this.getItemReviews}/></Grid> )}\r\n          </Grid>      \r\n        </Container>\r\n        {/* <Cart cartItems={this.state.cart} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(ItemDetailView);","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\FilterItems.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Reviews\\Reviews.tsx",["107"],"import React from 'react';\r\nimport { withStyles, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\ntype ReviewsProps = {\r\n  classes: any;\r\n  revObj: any;\r\n  key: number;\r\n  calculateTotalRating: any;\r\n  userId: number;\r\n  adminStatus: boolean;\r\n  sessionToken: string;\r\n  fetchReviews: any;\r\n}\r\n\r\ntype ReviewsState = {\r\n  user: any;\r\n  active: boolean;\r\n  rating: number;\r\n  review: string;\r\n  date: string;\r\n  errorStatus: boolean;\r\n}\r\n\r\nconst styles = (theme: any) => createStyles({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    fontFamily: 'Open Sans'\r\n    // overflow:'scroll',\r\n  },\r\n})\r\n\r\nclass Reviews extends React.Component<ReviewsProps, ReviewsState> {\r\n  constructor (props: ReviewsProps) {\r\n    super(props);\r\n      this.state = {\r\n        user: '',\r\n        active: false,\r\n        rating: 0,\r\n        review: '',\r\n        date: '',\r\n        errorStatus: false\r\n      }\r\n  } \r\n\r\n  setRating = (e: any) => {\r\n    this.setState({rating: e.target.value});\r\n  }\r\n\r\n  setReview = (e: any) => {\r\n    this.setState({review: e.target.value});\r\n  }\r\n\r\n  setDate = (e: any) => {\r\n    this.setState({date: e.target.value});\r\n  }\r\n\r\n  fetchUsers = () => {\r\n    fetch(`http://localhost:8080/user/${this.props.revObj.userId}`, {\r\n      method: 'GET'\r\n    })\r\n      .then(r => r.json())\r\n      .then(obj => this.setState({ user: obj.user }))\r\n  }\r\n\r\n  deleteReview = () => {\r\n    fetch(`http://localhost:8080/review/${this.props.revObj.id}`, {\r\n      method: 'DELETE',\r\n      headers: new Headers({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.props.sessionToken\r\n      })\r\n    }) \r\n    .then(() => this.props.fetchReviews())\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  // edit review\r\n  handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    const url = `http://localhost:8080/review/${this.props.revObj.id}`;\r\n    const body = {\r\n      rating: this.state.rating || this.props.revObj.rating,\r\n      review: this.state.review || this.props.revObj.review,\r\n      date: this.state.date || this.props.revObj.date\r\n    }\r\n  \r\n    fetch(url, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.props.sessionToken\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n      .then(r => r.json())\r\n      .then(rObj => {\r\n        console.log(rObj)\r\n        this.props.fetchReviews()\r\n        this.setState({ active: false }) // turn toggle off after editing item\r\n      })\r\n      .catch(err => {console.log(err); {this.setState({errorStatus: true})}})\r\n  }\r\n\r\n  toggle = () => {\r\n    const showEdit = this.state.active\r\n    this.setState({active: !showEdit})\r\n  }\r\n\r\n  getRating = () => {\r\n    return this.props.calculateTotalRating(this.props.revObj.rating)\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.fetchUsers();\r\n    this.getRating();\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.root}>\r\n          <Card className={classes.root} style={{borderRadius:'0px', border:'none'}}>\r\n          {/* if user created the review or is an admin, show the delete button */}\r\n            {this.props.userId === this.props.revObj.userId || this.props.adminStatus ? \r\n              <IconButton className=\"deleteButton\" color=\"inherit\" aria-label=\"menu\" style={{color: 'rgba(0, 0, 0, 0.87)', float:'right', height:'30px', width:'30px'}} \r\n              onClick={e =>\r\n                      window.confirm(\"Are you sure you wish to delete this item?\") && this.deleteReview()\r\n              }>\r\n                <DeleteIcon style={{height:'25px', width:'25px'}}/>\r\n              </IconButton> \r\n              : \r\n              null\r\n            }\r\n          {/* if user created the review or is an admin, show the edit button */}\r\n            {this.props.userId === this.props.revObj.userId || this.props.adminStatus ? \r\n              <IconButton className=\"createButton\" color=\"inherit\" aria-label=\"menu\" style={{color: 'rgba(0, 0, 0, 0.87)',  float:'right', height:'30px', width:'30px'}} onClick={this.toggle}>\r\n                <CreateIcon style={{height:'25px', width:'25px'}}/>\r\n              </IconButton>\r\n              :\r\n              null\r\n            }\r\n          {/* display review edit form when create icon has been clicked, otherwise display review */}\r\n            {this.state.active === false ? \r\n              <div>\r\n                <CardContent style={{ paddingTop:'1em'}}>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" style={{ fontFamily:'Open Sans' }}>\r\n                    <PersonIcon /> {this.state.user.firstName}\r\n                    <br/>\r\n                    {this.props.revObj.date}\r\n                  </Typography>\r\n                </CardContent>\r\n                <Rating\r\n                  name=\"customized-empty\"\r\n                  defaultValue={this.props.revObj.rating}\r\n                  precision={0.5}\r\n                  readOnly\r\n                  size=\"small\"\r\n                  style={{paddingLeft:'0.7em'}}\r\n                  emptyIcon={<StarBorderIcon fontSize=\"inherit\" />}\r\n                />\r\n                <CardContent style={{ paddingTop:'0'}}>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" style={{ fontFamily:'Open Sans' }}>\r\n                    {this.props.revObj.review}\r\n                  </Typography>\r\n                </CardContent>\r\n              </div>\r\n              :\r\n              <div className=\"paper\" style={{marginTop:'0em'}}>\r\n                <form onSubmit={this.handleSubmit} className=\"formEditReview\" style={{ width: '70%', fontFamily:'Open Sans' }} noValidate>\r\n                  <Rating\r\n                    name=\"customized-empty\"\r\n                    defaultValue={this.props.revObj.rating}\r\n                    emptyIcon={<StarBorderIcon fontSize=\"inherit\" />}\r\n                    onClick={this.setRating.bind(this)}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"review\"\r\n                    label=\"Review\"\r\n                    id=\"review\"\r\n                    style={{ fontFamily:'Open Sans' }}\r\n                    defaultValue={this.props.revObj.review}\r\n                    onChange = {this.setReview.bind(this)}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    id=\"date\"\r\n                    style={{ fontFamily:'Open Sans' }}\r\n                    defaultValue={this.props.revObj.date}\r\n                    onChange = {this.setDate.bind(this)}\r\n                  />\r\n                  <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{marginTop:\"1em\", marginBottom:'5em', fontFamily:'Open Sans' }}\r\n                    className=\"submitCreate\" >\r\n                    Edit Review\r\n                  </Button>\r\n                </form> \r\n              </div>\r\n            }\r\n          </Card>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(Reviews);","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Site\\Cart.tsx",["108"],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Site\\Footer.tsx",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":69,"column":40,"nodeType":"115","messageId":"116","endLine":69,"endColumn":76},{"ruleId":"113","severity":1,"message":"114","line":78,"column":40,"nodeType":"115","messageId":"116","endLine":78,"endColumn":76},{"ruleId":"109","replacedBy":"117"},{"ruleId":"111","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":16,"nodeType":"121","messageId":"122","endLine":2,"endColumn":24},{"ruleId":"119","severity":1,"message":"123","line":6,"column":8,"nodeType":"121","messageId":"122","endLine":6,"endColumn":14},{"ruleId":"119","severity":1,"message":"124","line":7,"column":8,"nodeType":"121","messageId":"122","endLine":7,"endColumn":18},{"ruleId":"119","severity":1,"message":"125","line":6,"column":8,"nodeType":"121","messageId":"122","endLine":6,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":137,"column":40,"nodeType":"115","messageId":"116","endLine":137,"endColumn":76},{"ruleId":"119","severity":1,"message":"126","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":27},{"ruleId":"119","severity":1,"message":"127","line":17,"column":8,"nodeType":"121","messageId":"122","endLine":17,"endColumn":18},{"ruleId":"119","severity":1,"message":"128","line":18,"column":8,"nodeType":"121","messageId":"122","endLine":18,"endColumn":12},{"ruleId":"113","severity":1,"message":"114","line":117,"column":40,"nodeType":"115","messageId":"116","endLine":117,"endColumn":76},{"ruleId":"119","severity":1,"message":"129","line":6,"column":8,"nodeType":"121","messageId":"122","endLine":6,"endColumn":12},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["130"],["131"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'AppBar' is defined but never used.","'Typography' is defined but never used.","'CardHeader' is defined but never used.","'AddShoppingCartIcon' is defined but never used.","'IconButton' is defined but never used.","'Cart' is defined but never used.","'Card' is defined but never used.","no-global-assign","no-unsafe-negation"]