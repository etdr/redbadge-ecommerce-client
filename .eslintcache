[{"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\index.tsx":"1","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\reportWebVitals.ts":"2","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\App.tsx":"3","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\site\\Navbar.tsx":"4","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\auth\\Register.tsx":"5","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\auth\\Login.tsx":"6","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Site\\Navbar.tsx":"7","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Auth\\Register.tsx":"8","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Auth\\Login.tsx":"9","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemsList.tsx":"10","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\Item.tsx":"11","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemCreate.tsx":"12","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemsSearch.tsx":"13","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\UserList.tsx":"14","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\User.tsx":"15","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\Admin.tsx":"16","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\ItemDetailView.tsx":"17","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\FilterItems.tsx":"18","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Reviews\\Reviews.tsx":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":6035,"mtime":1610760649501,"results":"23","hashOfConfig":"21"},{"size":1616,"mtime":1608064390132,"results":"24","hashOfConfig":"21"},{"size":5851,"mtime":1608062193212,"results":"25","hashOfConfig":"21"},{"size":4200,"mtime":1608062918479,"results":"26","hashOfConfig":"21"},{"size":5065,"mtime":1610766736758,"results":"27","hashOfConfig":"21"},{"size":6221,"mtime":1610766409135,"results":"28","hashOfConfig":"21"},{"size":5201,"mtime":1610765106809,"results":"29","hashOfConfig":"21"},{"size":1198,"mtime":1610766758481,"results":"30","hashOfConfig":"21"},{"size":10569,"mtime":1610764241018,"results":"31","hashOfConfig":"21"},{"size":4980,"mtime":1610761553806,"results":"32","hashOfConfig":"21"},{"size":995,"mtime":1610670881036,"results":"33","hashOfConfig":"21"},{"size":1125,"mtime":1610742093866,"results":"34","hashOfConfig":"21"},{"size":11322,"mtime":1610742187326,"results":"35","hashOfConfig":"21"},{"size":3341,"mtime":1610761067617,"results":"36","hashOfConfig":"21"},{"size":9599,"mtime":1610764933521,"results":"37","hashOfConfig":"21"},{"size":1029,"mtime":1610766751327,"results":"38","hashOfConfig":"21"},{"size":7861,"mtime":1610760499460,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1q2qrcs",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\index.tsx",[],["82","83"],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\reportWebVitals.ts",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\App.tsx",["84","85"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Admin from './components/Users/Admin';\nimport FilterItems from './components/StoreItems/FilterItems';\nimport ItemDetailView from './components/StoreItems/ItemDetailView';\nimport Login from './components/Auth/Login';\nimport Navbar from './components/Site/Navbar';\nimport Register from './components/Auth/Register';\nimport StoreItemsCreate from './components/StoreItems/StoreItemCreate';\nimport StoreItemsList from './components/StoreItems/StoreItemsList';\nimport UserList from './components/Users/UserList';\n \ntype AppState = {\n  token: string;\n  newToken: string;\n  userId: number;\n  setStoreItems: any;\n  storeItems: any[];\n  itemId: number;\n  users: any[];\n  filteredItems: any[];\n  sort: any;\n  isAdmin: any;\n  firstName: string;\n  searchTerm: string;\n  searchItems: any[];\n  rating: number;\n  redirect: boolean;\n  errorStatus: boolean;\n}\n\nclass App extends React.Component <{}, AppState> {\n  constructor (props: {}) {\n    super(props);\n    this.state = {\n      token: '',\n      newToken: '',\n      userId: -1,\n      setStoreItems: '',\n      storeItems: [],\n      itemId: 0,\n      users: [],\n      filteredItems: [],\n      sort: '',\n      isAdmin: false,\n      firstName: '',\n      searchTerm: '',\n      searchItems: [],\n      rating: 0,\n      redirect: false,\n      errorStatus: false\n    }\n  }\n\n  fetchStoreItems = () => {\n    fetch('http://localhost:8080/listing/', {\n      method: 'GET'\n    })\n      .then(r => r.json())\n      .then(obj => this.setState({ \n        storeItems: obj.listing, \n        filteredItems: obj.listing })) // filters items based on price\n      .catch(err => {console.log(err); {this.setState({errorStatus: true})}})\n  }\n\n  fetchUsers = () => {\n    fetch('http://localhost:8080/user/all/', {\n      method: 'GET'\n    })\n      .then(r => r.json())\n      .then(obj => this.setState({ users: obj.user }))\n      .catch(err => {console.log(err); {this.setState({errorStatus: true})}})\n  }\n\n  setToken = (token: string) => {\n    if (token) {\n      this.setState({token: token})\n    } else {\n      this.setState({token: localStorage.getItem('token') || ''}) \n    }\n    localStorage.setItem('token', token)\n  }\n\n  // updates the state for the token, userId,admin status, and first name when a user logs in or registers\n  updateToken = (newToken: any, updateId: any, updateAdmin: boolean, updateFirstName: string) => {\n    localStorage.setItem('token', newToken);\n    localStorage.setItem('id', updateId)\n    this.setState({token: newToken});\n    this.setState({userId: updateId});\n    this.setState({isAdmin: updateAdmin})\n    this.setState({firstName: updateFirstName})\n    console.log('Token: ', newToken)\n    console.log(\"User id: \", updateId)\n    console.log(\"Admin? :\", updateAdmin)\n    console.log(\"User first name:\", updateFirstName)\n  }\n\n  updateSearch = (storeItem: any[]) => {\n    this.setState({ storeItems: storeItem })\n    console.log(\"search\", storeItem)\n  }\n\n  updateItemId = (itemId: any) => {\n    this.setState({ itemId: itemId })\n    console.log('itemid', itemId)\n  }\n\n  // when user logs out, it redirects to '/' and resets the first name\n  clearToken = () => {\n    localStorage.clear();\n    this.setState({ redirect: true })\n    this.setState({ firstName: ''})\n  }\n\n  listItems = () => {\n    this.setState(state => {\n      // if state of sort is not empty, sort based on lowest or highest price\n      if(state.sort !== '') {\n        this.state.storeItems.sort((a,b) => (this.state.sort === 'lowest') ? (a.price < b.price ? 1 : -1) : (a.price > b.price ? 1 : -1))\n      } \n      else {\n        state.storeItems.sort((a,b) => (a.id > b.id ? 1: -1));\n      }\n      return {filteredItems: this.state.storeItems};\n    })\n  }\n\n  handleChangeSort = (e: any) => {\n    this.setState({sort: e.target.value})\n    this.listItems();\n  }\n\n  componentWillMount() {\n    this.setToken('')\n    this.fetchStoreItems()\n    this.fetchUsers()\n  }\n\n  render() {  \n    \n    return (\n      <div> \n        {/* {console.log(\"App token \" + this.state.rating)} */}\n        <Router>\n          <Navbar clickLogout={this.clearToken} sessionToken={this.state.token} adminStatus={this.state.isAdmin} userFirstName={this.state.firstName} searchItems={this.state.searchItems} updateSearch={this.updateSearch} fetchStoreItems={this.fetchStoreItems} />\n          {/* redirect to '/' when user logs out */}\n          {this.state.redirect ? (<Redirect to='/'/> && window.location.reload()) : null}\n          {/* if there is an issue fetching data, redirect to home page */}\n          {this.state.errorStatus ? (<Redirect to=\"/\" />) : null}\n          <Switch>\n            <Route path='/listing/create'><StoreItemsCreate sessionToken={this.state.token} fetchStoreItems={this.fetchStoreItems}/></Route>\n            <Route path='/user/register'><Register updateToken={this.updateToken} token={this.state.token}/></Route>\n            <Route path='/user/login' exact ><Login updateToken={this.updateToken} token={this.state.token} adminStatus={this.state.isAdmin}/></Route>\n            <Route path='/user/all' ><UserList users={this.state.users} fetchUsers={this.fetchUsers} sessionToken={this.state.token} token={this.state.token}/></Route>\n            <Route path='/' exact ><StoreItemsList sessionToken={this.state.token} adminStatus={this.state.isAdmin} storeItems={this.state.storeItems} fetchStoreItems={this.fetchStoreItems} sort={this.state.sort} handleChangeSort={this.handleChangeSort} updateItemId={this.updateItemId} /></Route>\n            <Route path='/listing/:id'><ItemDetailView storeItemId={this.state.itemId} sessionToken={this.state.token} userId={this.state.userId} adminStatus={this.state.isAdmin} /></Route>\n            <Route path='/user/admin'><Admin sessionToken={this.state.token}/></Route>\n            <Route path='sort'><FilterItems sort={this.state.sort} handleChangeSort={this.handleChangeSort} /></Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\site\\Navbar.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\auth\\Register.tsx",[],["86","87"],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\auth\\Login.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Site\\Navbar.tsx",["88"],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Auth\\Register.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Auth\\Login.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemsList.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\Item.tsx",["89"],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemCreate.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\StoreItemsSearch.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\UserList.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\User.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Users\\Admin.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\ItemDetailView.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\StoreItems\\FilterItems.tsx",[],"C:\\Users\\heway\\Desktop\\ElevenFiftyProjects\\RedBadge\\redBadgeProject\\store-app\\src\\components\\Reviews\\Reviews.tsx",["90"],"import React from 'react';\r\nimport { withStyles, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\ntype ReviewsProps = {\r\n  classes: any;\r\n  revObj: any;\r\n  key: number;\r\n  calculateTotalRating: any;\r\n  userId: number;\r\n  adminStatus: boolean;\r\n  sessionToken: any;\r\n  fetchReviews: any;\r\n}\r\n\r\ntype ReviewsState = {\r\n  user: any;\r\n  active: boolean;\r\n  rating: number;\r\n  review: string;\r\n  date: any;\r\n  errorStatus: boolean;\r\n}\r\n\r\nconst styles = (theme: any) => createStyles({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    // overflow:'scroll',\r\n  },\r\n})\r\n\r\nclass Reviews extends React.Component<ReviewsProps, ReviewsState> {\r\n  constructor (props: ReviewsProps) {\r\n    super(props);\r\n      this.state = {\r\n        user: '',\r\n        active: false,\r\n        rating: 0,\r\n        review: '',\r\n        date: '',\r\n        errorStatus: false\r\n      }\r\n  } \r\n\r\n  setRating = (e: any) => {\r\n    this.setState({rating: e.target.value});\r\n  }\r\n\r\n  setReview = (e: any) => {\r\n    this.setState({review: e.target.value});\r\n  }\r\n\r\n  setDate = (e: any) => {\r\n    this.setState({date: e.target.value});\r\n  }\r\n\r\n  fetchUsers = () => {\r\n    fetch(`http://localhost:8080/user/${this.props.revObj.userId}`, {\r\n      method: 'GET'\r\n    })\r\n      .then(r => r.json())\r\n      .then(obj => this.setState({ user: obj.user }))\r\n  }\r\n\r\n  deleteReview = () => {\r\n    fetch(`http://localhost:8080/review/${this.props.revObj.id}`, {\r\n      method: 'DELETE',\r\n      headers: new Headers({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.props.sessionToken\r\n      })\r\n    }) \r\n    .then(() => this.props.fetchReviews())\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  // edit review\r\n  handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    const url = `http://localhost:8080/review/${this.props.revObj.id}`;\r\n    const body = {\r\n      rating: this.state.rating || this.props.revObj.rating,\r\n      review: this.state.review || this.props.revObj.review,\r\n      date: this.state.date || this.props.revObj.date\r\n    }\r\n  \r\n    fetch(url, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.props.sessionToken\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n      .then(r => r.json())\r\n      .then(rObj => {\r\n        console.log(rObj)\r\n        this.props.fetchReviews()\r\n        this.setState({ active: false }) // turn toggle off after editing item\r\n      })\r\n      .catch(err => {console.log(err); {this.setState({errorStatus: true})}})\r\n  }\r\n\r\n  toggle = () => {\r\n    const showEdit = this.state.active\r\n    this.setState({active: !showEdit})\r\n  }\r\n\r\n  getRating = () => {\r\n    return this.props.calculateTotalRating(this.props.revObj.rating)\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.fetchUsers();\r\n    this.getRating();\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.root}>\r\n          <Card className={classes.root} >\r\n          {/* if user created the review or is an admin, show the delete button */}\r\n            {this.props.userId === this.props.revObj.userId || this.props.adminStatus ? \r\n              <IconButton className=\"deleteButton\" color=\"inherit\" aria-label=\"menu\" style={{color: 'rgba(0, 0, 0, 0.87)', float:'right', height:'30px', width:'30px'}} \r\n              onClick={e =>\r\n                      window.confirm(\"Are you sure you wish to delete this item?\") && this.deleteReview()\r\n              }>\r\n                <DeleteIcon style={{height:'25px', width:'25px'}}/>\r\n              </IconButton> \r\n              : \r\n              null\r\n            }\r\n          {/* if user created the review or is an admin, show the edit button */}\r\n            {this.props.userId === this.props.revObj.userId || this.props.adminStatus ? \r\n              <IconButton className=\"createButton\" color=\"inherit\" aria-label=\"menu\" style={{color: 'rgba(0, 0, 0, 0.87)',  float:'right', height:'30px', width:'30px'}} onClick={this.toggle}>\r\n                <CreateIcon style={{height:'25px', width:'25px'}}/>\r\n              </IconButton>\r\n              :\r\n              null\r\n            }\r\n          {/* display review edit form when create icon has been clicked, otherwise display review */}\r\n            {this.state.active === false ? \r\n              <div>\r\n                <CardContent style={{ paddingTop:'1em'}}>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    <PersonIcon /> {this.state.user.firstName}\r\n                    <br/>\r\n                    {this.props.revObj.date}\r\n                  </Typography>\r\n                </CardContent>\r\n                <Rating\r\n                  name=\"customized-empty\"\r\n                  defaultValue={this.props.revObj.rating}\r\n                  precision={0.5}\r\n                  readOnly\r\n                  size=\"small\"\r\n                  style={{paddingLeft:'0.7em'}}\r\n                  emptyIcon={<StarBorderIcon fontSize=\"inherit\" />}\r\n                />\r\n                <CardContent style={{ paddingTop:'0'}}>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    {this.props.revObj.review}\r\n                  </Typography>\r\n                </CardContent>\r\n              </div>\r\n              :\r\n              <div className=\"paper\" style={{marginTop:'0em'}}>\r\n                <form onSubmit={this.handleSubmit} className=\"formEditReview\" style={{ width: '70%' }} noValidate>\r\n                  <Rating\r\n                    name=\"customized-empty\"\r\n                    defaultValue={this.props.revObj.rating}\r\n                    emptyIcon={<StarBorderIcon fontSize=\"inherit\" />}\r\n                    onClick={this.setRating.bind(this)}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"review\"\r\n                    label=\"Review\"\r\n                    id=\"review\"\r\n                    defaultValue={this.props.revObj.review}\r\n                    onChange = {this.setReview.bind(this)}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    id=\"date\"\r\n                    defaultValue={this.props.revObj.date}\r\n                    onChange = {this.setDate.bind(this)}\r\n                  />\r\n                  <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{marginTop:\"1em\", marginBottom:'5em'}}\r\n                    className=\"submitCreate\" >\r\n                    Edit Review\r\n                  </Button>\r\n                </form> \r\n              </div>\r\n            }\r\n          </Card>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(Reviews);",{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":63,"column":40,"nodeType":"97","messageId":"98","endLine":63,"endColumn":76},{"ruleId":"95","severity":1,"message":"96","line":72,"column":40,"nodeType":"97","messageId":"98","endLine":72,"endColumn":76},{"ruleId":"91","replacedBy":"99"},{"ruleId":"93","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":16,"nodeType":"103","messageId":"104","endLine":2,"endColumn":24},{"ruleId":"95","severity":1,"message":"96","line":136,"column":40,"nodeType":"97","messageId":"98","endLine":136,"endColumn":76},{"ruleId":"95","severity":1,"message":"96","line":116,"column":40,"nodeType":"97","messageId":"98","endLine":116,"endColumn":76},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["105"],["106"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]